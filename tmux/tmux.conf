# utf8 is on
#set -g utf8 on
#set -g status-utf8 on

# Use C-a instead of C-a
unbind C-b
set -g prefix ^A
unbind C-a
bind C-a send-prefix

# Allow holding down control and tapping p/n repeatedly
bind C-p previous-window
bind C-n next-window

# Use emacs keybindings for tmux prompt
set -g status-keys emacs

# Enable focus events for supporting terminals
set -g focus-events on

# Quickly jump to next
bind A select-pane -t :.+

# Quickly jump to last window
bind a last-window
bind C-d last-pane

# Select window
bind Space choose-window

# Easily reload the config file
unbind R
bind R source-file ~/.tmux.conf \; display-message "Config reloaded!"

# | to split vertically. - to split horizontally
unbind %
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# Assume we won't want to use ESC in a key sequence, so don't wait for it
set -s escape-time 0

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Activity monitoring
setw -g monitor-activity on
set -g visual-activity on

# macOS only
# On other systems, should be set to just `bash`, so as not to spawn a login shell (tmux default is `bash -l`)
set -g default-command "reattach-to-user-namespace $SHELL"

# Vi copypaste mode
set-window-option -g mode-keys vi
unbind [
bind Tab copy-mode
#bind-key -t vi-copy 'v' begin-selection
#bind-key -t vi-copy 'V' rectangle-toggle
#bind-key -t vi-copy 'y' copy-selection

# https://shapeshed.com/custom-vim-bindings-in-tmux-2-4/
run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6-)"
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' \
  "bind-key Escape copy-mode; \
  bind-key -t vi-copy Escape cancel; \
  bind-key p paste-buffer; \
  bind-key -t vi-copy v begin-selection; \
  bind-key -t vi-copy V select-line; \
  bind-key -t vi-copy r rectangle-toggle; \
  bind -t vi-copy y copy-pipe 'pbcopy'"

if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1 ]' \
  "bind-key -T copy-mode-vi 'v' send -X begin-selection; \
  bind-key -T copy-mode-vi 'V' send -X select-line; \
  bind-key -T copy-mode-vi 'r' send -X rectangle-toggle; \
  bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel 'pbcopy'"

# ; \
#unbind -T copy-mode-vi Enter; \
#    bind-key -T copy-mode-vi Enter copy-pipe-and-cancel 'pbcopy'

unbind P
bind P paste-buffer

bind b choose-buffer

# resize pane with arrow keys
# -r: can be repeated without pressing prefix
#     again (500ms after last '-r' action or prefix)
unbind Left
unbind Right
unbind Down
unbind Up
bind -r Left resize-pane -L 2
bind -r Right resize-pane -R 2
bind -r Down resize-pane -D 2
bind -r Up resize-pane -U 2

# hjkl pane traversal
#bind h select-pane -L
#bind j select-pane -D
#bind k select-pane -U
#bind l select-pane -R

# bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
# bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?|fzf)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\ select-pane -l

# Toggle sync panes
bind-key C-q set-window-option synchronize-panes\; display-message "synchronize-panes: #{?pane_synchronized,ON,OFF}"

bind-key f run-shell "tmux list-windows -a | fzf-tmux | cut -d: -f-2 | xargs tmux switch-client -t"
bind-key F command-prompt "find-window '%%'"

# Start windows & panes at 1, not 0
set -g base-index 1
set -g pane-base-index 1

# change terminal emulator
set -g set-titles on
set -g set-titles-string "#T"

# auto window rename
set-window-option -g automatic-rename

# None of that, thank you.
set -g mouse off
#set -g mouse-utf off

# keep env variables in sync across WM sessions
set -g update-environment 'DISPLAY DBUS_SESSION_BUS_ADDRESS DESKTOP_SESSION GPG_AGENT_INFO KONSOLE_DBUS_SERVICE KONSOLE_DBUS_SESSION KDE_SESSION_UID SESSION_MANAGER SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY XDG_SESSION_COOKIE'

# Show pane numbers (and therefore allow selection) a bit longer
set -g display-panes-time 2000

# color
set -g default-terminal "screen-256color"
set-option -ga terminal-overrides ",xterm-256color*:Tc,xterm-kitty:Tc"

# Set scrollback to 100000
# 100k uses a lot of memory... trying a bit lower
set -g history-limit 50000

# Appearance
set -g status-style bg=black,fg=white
set -g status-interval 2
set -g status-left-length 50
set -g status-left '#[fg=green](#S) #H | #[default]ctx:#[fg=blue]#(_kctx.sh)#[default] ns:#[fg=blue]#(_kns.sh) #[default]| '
#set -g status-right '#[fg=green]| #[fg=yellow]#(cut -d " " -f 1-3 /proc/loadavg)#[default] #[fg=blue]%H:%M:%S#[default]'
set -g status-right '#[fg=green]|'

# default window title colours
set-window-option -g window-status-style fg=white,bg=default,dim

# active window title colours
set-window-option -g window-status-current-style fg=green,bg=default,dim

# activity window title colours
set-window-option -g window-status-activity-style fg=red,bg=white,dim

# System clipboard integration, from: https://wiki.archlinux.org/index.php/Tmux#ICCCM_Selection_Integration
# Copy tmux paste buffer to CLIPBOARD
# TODO: add linux conditional, or maybe just bin this
# bind C-c run-shell -b "tmux show-buffer | xclip -i -selection clipboard"
# Copy CLIPBOARD to tmux paste buffer and paste tmux paste buffer
# bind P run-shell -b "tmux set-buffer -- \"$(xclip -o -selection clipboard)\"; tmux paste-buffer"


##
## Plugins
##

# List of plugins
set -g @plugin 'tmux-plugins/tpm'

# 2018-11-13: unused
# set -g @plugin 'tmux-plugins/tmux-fpp'

# TODO: not actually working, although it does disable the binding which is good...
set -g @resurrect-restore '<F10>'
set -g @resurrect-save 'S'
set -g @plugin 'tmux-plugins/tmux-resurrect'

set -g @plugin 'tmux-plugins/tmux-yank'
set -g @yank_action 'copy-pipe' # Don't scroll to bottom on copy

# Initializes TMUX plugin manager.
# Keep this line at the very bottom of tmux.conf.
run-shell '~/.tmux/plugins/tpm/tpm'
